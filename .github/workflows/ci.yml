# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Build, Test, Scan

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
        
    - name: Restore dependencies
      run: dotnet restore ./Lab1/Lab1.sln
      
    - name: Build
      run: dotnet build ./Lab1/Lab1.sln --configuration Release --no-restore

    - name: SonarCloud Scan
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
      run: |
        dotnet tool install --global dotnet-sonarscanner
        dotnet tool install --global dotnet-coverage
        dotnet sonarscanner begin /o:"rsukhaniuk" /k:"$SONAR_PROJECT_KEY" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.token="$SONAR_TOKEN" -d:sonar.inclusions="Lab1/Lab1/**" -d:sonar.test.inclusions="Lab1/Lab1.UnitTests/**" /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml /d:sonar.qualitygate.wait=true
        dotnet build ./Lab1/Lab1.sln
        dotnet-coverage collect dotnet test -f xml -o coverage.xml ./Lab1/Lab1.sln
        dotnet sonarscanner end /d:sonar.token="$SONAR_TOKEN"
      
    - name: Test
      run: dotnet test ./Lab1/Lab1.sln --configuration Release --no-restore --no-build --logger trx --results-directory ./test-report
      
    - name: Publish artifact
      run: dotnet publish ./Lab1/Lab1.sln -c Release -o output
      
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: build-artifact
        path: output
        
    - name: Upload Test Report
      uses: actions/upload-artifact@v3
      with:
        name: test-report
        path: ./test-report
